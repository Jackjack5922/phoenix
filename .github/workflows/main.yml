name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. AWS CLI 업데이트
    - name: Update AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    # 3. AWS 자격 증명 설정
    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    # 4. Amazon ECR 로그인
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

    # 5. Docker 이미지 빌드 및 푸시
    - name: Build and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      run: |
        docker build -t $ECR_REGISTRY/${{secrets.IMAGE_NAME}}:latest .
        docker push $ECR_REGISTRY/${{secrets.IMAGE_NAME}}:latest
    
    # 6. EC2에 배포
    - name: Deploy Docker image to EC2
      run: |
        # SSH 키 파일 생성
        echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
        
        # EC2에 SSH 접속하여 Docker 이미지 실행
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
          # AWS CLI 설치
          if ! [ -x "$(command -v aws)" ]; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # AWS 자격 증명 설정 (IAM 역할 대신 Secrets 사용 시)
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

          # Docker 인증
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

          # ECR에서 최신 이미지 가져오기
          docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:latest
          
          # 기존 컨테이너 중지 및 삭제
          docker stop myapp || true
          docker rm myapp || true
          
          # 새 컨테이너 실행
          docker run -d --name myapp -p 80:80 ${{ secrets.ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:latest
        EOF